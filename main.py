import os
import re
import requests
import time

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from config import (
    FOLDER_PATH,
    ACCESS_TOKEN,
    VK_API_VERSION,
    DELAY_BETWEEN_REQUESTS,
    DELETE_COMMENT_URL
)

def extract_comment_links_from_file(file_path):
    encodings_to_try = ['cp1251', 'latin1', 'utf-8', 'utf-16']
    content = None

    for enc in encodings_to_try:
        try:
            with open(file_path, 'r', encoding=enc) as f:
                content = f.read()
            print(f"‚úÖ {os.path.basename(file_path)} ‚Äî –ø—Ä–æ—á–∏—Ç–∞–Ω–æ ({enc})")
            break
        except UnicodeDecodeError:
            continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            return []

    if not content:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path}")
        return []

    urls = re.findall(r'https://vk\.com/wall-?\d+_\d+\?reply=\d+', content)
    print(f"üîé –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}")
    return urls

def parse_ids_from_url(url):
    match = re.search(r'wall(-?\d+)_(\d+)\?reply=(\d+)', url)
    if match:
        return {
            'owner_id': int(match.group(1)),
            'comment_id': int(match.group(3))
        }
    return None

def delete_comment(owner_id, comment_id):
    url = DELETE_COMMENT_URL.strip()  # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    params = {
        'access_token': ACCESS_TOKEN,
        'v': VK_API_VERSION,
        'owner_id': owner_id,
        'comment_id': comment_id
    }

    try:
        response = requests.post(url, data=params)
        data = response.json()

        if 'response' in data:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: {comment_id}")
            return True
        elif 'error' in data:
            error = data['error']
            code = error['error_code']
            msg = error['error_msg']

            if code == 211:
                print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {comment_id}: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (—Å—Ç–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞/—É–∂–µ —É–¥–∞–ª–µ–Ω)")
            elif code == 18:
                print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {comment_id}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            elif code == 9:
                print(f"üí§ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
                time.sleep(5)
            elif code == 6:
                print(f"üí§ –ó–∞–¥–∞–π—Ç–µ –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ API")
                time.sleep(1)
            elif code == 14:
                print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (Captcha)")
            elif code == 7:
                print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ {comment_id}")
            else:
                print(f"‚ùå [{code}] –û—à–∏–±–∫–∞ –¥–ª—è {comment_id}: {msg}")
            return False
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {comment_id}: {data}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {comment_id}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {comment_id}: {e}")
        return False

def main():
    if not os.path.exists(FOLDER_PATH):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {FOLDER_PATH}")
        return

    files = [
        os.path.join(FOLDER_PATH, f)
        for f in os.listdir(FOLDER_PATH)
        if f.lower().endswith(('.html', '.htm', '.txt')) and os.path.isfile(os.path.join(FOLDER_PATH, f))
    ]

    if not files:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ: {FOLDER_PATH}")
        return

    print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n")

    total_processed = 0
    total_deleted = 0
    processed_comments = set()

    for file_path in files:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
        urls = extract_comment_links_from_file(file_path)

        for url in urls:
            ids = parse_ids_from_url(url)
            if not ids:
                continue

            comment_id = ids['comment_id']

            if comment_id in processed_comments:
                print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {comment_id} (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")
                continue

            processed_comments.add(comment_id)
            total_processed += 1

            success = delete_comment(ids['owner_id'], comment_id)
            if success:
                total_deleted += 1

            time.sleep(DELAY_BETWEEN_REQUESTS)

    print("\n" + "="*50)
    print("üî• –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(files)}")
    print(f"üîé –°—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_processed}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {total_deleted}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {total_processed - total_deleted}")
    print("="*50)


if __name__ == '__main__':
    main()